spring.application.name=capston-spring

# template
spring.thymeleaf.cache=false


# Spring DataSource (MySQL)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Spring JPA
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# AWS
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME}
aws.s3.region=ap-northeast-2


# Swagger
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui/index.html

# JWT
spring.jwt.secret=${JWT_SECRET}

# Spring Security log
logging.level.org.springframework.security=DEBUG


# Naver Social Login (OAuth2)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.client-authentication-method=client_secret_basic
spring.security.oauth2.client.registration.naver.client-name=Naver
spring.security.oauth2.client.registration.naver.scope=name,email


# Google Social Login (OAuth2)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.registration.google.scope=email, profile


# SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GOOGLE_EMAIL}
spring.mail.password=${GOOGLE_APP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Redis
spring.redis.host=${REDIS_IP_ADDRESS}
spring.redis.port=6379
spring.redis.password="1234"
spring.redis.timeout=60000

# MultiFile Upload Size
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

# devtools
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# Flask API URL ??
flask.api.baseurl=${FLASK_API_BASEURL}
flask.api.analyze=${FLASK_API_BASEURL}/analyze

